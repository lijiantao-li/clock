// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/16/2020 22:58:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lijiantao2018114266_11
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lijiantao2018114266_11_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] NZFGE;
reg [3:0] NZFSHI;
reg [3:0] NZHGE;
reg [3:0] NZHSHI;
reg NZTZANJ;
reg [3:0] SZFGE;
reg [3:0] SZFSHI;
reg [3:0] SZHGE;
reg [3:0] SZHSHI;
// wires                                               
wire SOUND;

// assign statements (if any)                          
lijiantao2018114266_11 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.NZFGE(NZFGE),
	.NZFSHI(NZFSHI),
	.NZHGE(NZHGE),
	.NZHSHI(NZHSHI),
	.NZTZANJ(NZTZANJ),
	.SOUND(SOUND),
	.SZFGE(SZFGE),
	.SZFSHI(SZFSHI),
	.SZHGE(SZHGE),
	.SZHSHI(SZHSHI)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 
// NZFGE[ 3 ]
initial
begin
	NZFGE[3] = 1'b0;
end 
// NZFGE[ 2 ]
initial
begin
	NZFGE[2] = 1'b1;
end 
// NZFGE[ 1 ]
initial
begin
	NZFGE[1] = 1'b0;
end 
// NZFGE[ 0 ]
initial
begin
	NZFGE[0] = 1'b1;
end 
// NZFSHI[ 3 ]
initial
begin
	NZFSHI[3] = 1'b0;
end 
// NZFSHI[ 2 ]
initial
begin
	NZFSHI[2] = 1'b0;
end 
// NZFSHI[ 1 ]
initial
begin
	NZFSHI[1] = 1'b1;
end 
// NZFSHI[ 0 ]
initial
begin
	NZFSHI[0] = 1'b0;
end 
// NZHGE[ 3 ]
initial
begin
	NZHGE[3] = 1'b0;
end 
// NZHGE[ 2 ]
initial
begin
	NZHGE[2] = 1'b0;
end 
// NZHGE[ 1 ]
initial
begin
	NZHGE[1] = 1'b0;
end 
// NZHGE[ 0 ]
initial
begin
	NZHGE[0] = 1'b1;
end 
// NZHSHI[ 3 ]
initial
begin
	NZHSHI[3] = 1'b0;
end 
// NZHSHI[ 2 ]
initial
begin
	NZHSHI[2] = 1'b0;
end 
// NZHSHI[ 1 ]
initial
begin
	NZHSHI[1] = 1'b0;
end 
// NZHSHI[ 0 ]
initial
begin
	NZHSHI[0] = 1'b1;
end 

// NZTZANJ
initial
begin
	NZTZANJ = 1'b1;
	NZTZANJ = #400000 1'b0;
end 
// SZFGE[ 3 ]
initial
begin
	SZFGE[3] = 1'b0;
end 
// SZFGE[ 2 ]
initial
begin
	SZFGE[2] = 1'b1;
end 
// SZFGE[ 1 ]
initial
begin
	SZFGE[1] = 1'b0;
end 
// SZFGE[ 0 ]
initial
begin
	SZFGE[0] = 1'b1;
end 
// SZFSHI[ 3 ]
initial
begin
	SZFSHI[3] = 1'b0;
end 
// SZFSHI[ 2 ]
initial
begin
	SZFSHI[2] = 1'b0;
end 
// SZFSHI[ 1 ]
initial
begin
	SZFSHI[1] = 1'b1;
end 
// SZFSHI[ 0 ]
initial
begin
	SZFSHI[0] = 1'b0;
end 
// SZHGE[ 3 ]
initial
begin
	SZHGE[3] = 1'b0;
end 
// SZHGE[ 2 ]
initial
begin
	SZHGE[2] = 1'b0;
end 
// SZHGE[ 1 ]
initial
begin
	SZHGE[1] = 1'b0;
end 
// SZHGE[ 0 ]
initial
begin
	SZHGE[0] = 1'b1;
end 
// SZHSHI[ 3 ]
initial
begin
	SZHSHI[3] = 1'b0;
end 
// SZHSHI[ 2 ]
initial
begin
	SZHSHI[2] = 1'b0;
end 
// SZHSHI[ 1 ]
initial
begin
	SZHSHI[1] = 1'b0;
end 
// SZHSHI[ 0 ]
initial
begin
	SZHSHI[0] = 1'b1;
end 
endmodule

