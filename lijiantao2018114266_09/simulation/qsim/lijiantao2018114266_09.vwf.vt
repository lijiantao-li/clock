// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/08/2020 20:12:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lijiantao2018114266_09
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lijiantao2018114266_09_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg [2:0] S;
reg ST;
// wires                                               
wire [3:0] R0;
wire [3:0] R1;
wire [3:0] R2;
wire [3:0] R3;
wire [3:0] R4;
wire [3:0] R5;

// assign statements (if any)                          
lijiantao2018114266_09 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.S(S),
	.ST(ST)
);
initial 
begin 
#100000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// CLR
initial
begin
	CLR = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b1;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b1;
end 

// ST
always
begin
	ST = 1'b0;
	ST = #500000 1'b1;
	#500000;
end 
endmodule

